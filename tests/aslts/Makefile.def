# Makefile.def

# Set variables:
#
# for install:
#    ASL - path name of iASL compiler
#
# Internal variables to be pre-defined:
#   TOP    - relative name of aslts directory
#   AMLMOD - name of resulting AML module (DefinitionBlock->AMLFileName)
#            without .aml extension.

# Two level hierarchy of compilation:
# optimization & (32/64 mode).
#
#  Directory |           Flags
#            |---------------------------
#            | optimization |  32/64 mode
# ---------------------------------------
#    opt/32  |              |  -r 1
#    opt/64  |              |  -r 2
#   nopt/32  |  -oa         |  -r 1
#   nopt/64  |  -oa         |  -r 2

ifndef ASLTS_AMLDIR
ifeq ("$(ASLTS_MODE)", "n32")
	ASLTS_AMLDIR=nopt/32
	ASLTS_ASLFLAGS="-oa -r 1"
endif
ifeq ("$(ASLTS_MODE)", "n64")
	ASLTS_AMLDIR=nopt/64
	ASLTS_ASLFLAGS="-oa -r 2"
endif
ifeq ("$(ASLTS_MODE)", "o32")
	ASLTS_AMLDIR=opt/32
	ASLTS_ASLFLAGS="-r 1"
endif
ifeq ("$(ASLTS_MODE)", "o64")
	ASLTS_AMLDIR=opt/64
	ASLTS_ASLFLAGS="-r 2"
endif
endif
ASLTS_VER ?= $(ASLTS_VER)

COMMON_ASL_FLAGS= "-of -cr -vs -l -sc -sa -ic -ta -ts -so -lm -ln -ls -li"

COMPILER_LOG="$(TOP)/tmp/aml/$(ASLTS_VER)/compile.txt"
COMPILER_ERROR_LOG="$(TOP)/tmp/aml/$(ASLTS_VER)/error.txt"

# Create general directory

GDMODE=775
INST= install
INST.dir= $(INST) -d -m $(GDMODE) $@
ASLMOD= MAIN

# Empty all (specify 'all' target, if needed, before Makefile.def include)

empty_all:	FORCE

# Rule to create directories located into aslts/tmp/aml;

$(TOP)/tmp/aml/$(ASLTS_VER)/$(ASLTS_AMLDIR):
	@$(INST.dir)

# Make-install one particular Test Case for all modes

install_all_modes_of_test_case:	$(TOP)/tmp/aml/$(ASLTS_VER)/$(ASLTS_AMLDIR)
	@rval=0; \
	if [ -f "$(ASL)" ]; then \
		dd=`pwd`; \
		echo "---- Test path: $$dd" >> $(COMPILER_LOG); \
		echo "---- Test path: $$dd" >> $(COMPILER_ERROR_LOG); \
		>&2 echo "Test path: $$dd"; \
		echo "---- Test type: $(ASLTS_AMLDIR)   (Flags $(COMMON_ASL_FLAGS) $(ASLTS_ASLFLAGS) $(ADD_ASLFLAGS))" >> $(COMPILER_LOG); \
		echo "---- Test type: $(ASLTS_AMLDIR)   (Flags $(COMMON_ASL_FLAGS) $(ASLTS_ASLFLAGS) $(ADD_ASLFLAGS))" >> $(COMPILER_ERROR_LOG); \
		for j in ${AMLMOD}; do \
			rm -f $$j.aml; \
		done; \
		for j in ${ASLMOD} $(ASLMODADD); do \
			echo "---- Compile: $$j.asl" >> $(COMPILER_LOG); \
			>&2 printf "%-18s" "    Type: $(ASLTS_AMLDIR) "; \
			>&2 printf  "Compile"; \
			"$(ASL)" $(ASLTS_ASLFLAGS) "$(COMMON_ASL_FLAGS)" $(ADD_ASLFLAGS) $$j.asl >> $(COMPILER_LOG) 2>> $(COMPILER_ERROR_LOG); \
			ret=$$?; \
			echo "" >> $(COMPILER_LOG); \
			if [ $(OPT) -eq 0 ] && [ "x$(ADD_ASLFLAGS)" != "x-f" ]; then \
				for k in ${AMLMOD}; do \
					>&2 printf  " => Compile Ext in-place"; \
					"$(ASL)" -p $$k-extInPlace -oE $(ASLTS_ASLFLAGS) "$(COMMON_ASL_FLAGS)" $(ADD_ASLFLAGS) $$j.asl >> $(COMPILER_LOG) 2>> $(COMPILER_ERROR_LOG); \
					if [ ! -f $$k-extInPlace.aml ]; then \
						>&2 printf " [[ Error: disassembly failed of $$k.aml failed ]]\n"; \
						>&2 printf "          Flags used: -p $$k-aslminus -oE -cr -vs $(ASLTS_ASLFLAGS) $(ADD_ASLFLAGS) -od -dl\n\n"; \
						#exit 1; \
					fi; \
					>&2 printf " => Disassemble"; \
					echo "---- Diasassemble: $$k.aml" >> $(COMPILER_LOG); \
					echo "---- Diasassemble: $$k.aml" >> $(COMPILER_ERROR_LOG); \
					"$(ASL)" -p $$k-aslminus -oe -cr -vs $(ASLTS_ASLFLAGS) $(ADD_ASLFLAGS) -od -dl $$k-extInPlace.aml >> $(COMPILER_LOG) 2>> $(COMPILER_ERROR_LOG); \
					if [ ! -f $$k-aslminus.dsl ]; then \
						>&2 printf " [[ Error: disassembly failed of $$k.aml failed ]]\n"; \
						>&2 printf "          Flags used: -p $$k-aslminus -cr -vs $(ASLTS_ASLFLAGS) $(ADD_ASLFLAGS) -od -dl\n\n"; \
						#exit 1; \
					fi; \
					>&2 printf " => Recompile"; \
					echo "---- Recompile: $$k.dsl" >> $(COMPILER_LOG); \
					echo "---- Recompile: $$k.dsl" >> $(COMPILER_ERROR_LOG); \
					"$(ASL)" $(ASLTS_ASLFLAGS) "$(COMMON_ASL_FLAGS)" $(ADD_ASLFLAGS) $$k-aslminus.dsl >> $(COMPILER_LOG) 2>> $(COMPILER_ERROR_LOG); \
					if [ ! -f $$k-aslminus.aml ]; then \
						>&2 printf " [[ Error: re-compilation of $$k-aslminus.dsl failed]]\n"; \
						>&2 printf "          Flags used: $(ASLTS_ASLFLAGS) "$(COMMON_ASL_FLAGS)" $(ADD_ASLFLAGS)\n\n"; \
						#exit 1; \
					fi; \
					if [ $(ASLTS_AMLDIR) = "nopt/32" ] || [ $(ASLTS_AMLDIR) = "nopt/64" ]; then \
						>&2 printf " => Binary compare"; \
						rm -f comparison_output.txt; \
						acpibin -c $$k.aml $$k-aslminus.aml >> comparison_output.txt; \
						if [ $$? != 0 ]; then \
							>&2 printf " [[ Error: comparison of $$k.aml and $$k-aslminus.aml do not match ]]"; \
							cat comparison_output.txt | sed '1,/^Error/d' | sed 's/Error - Byte mismatch at offset     /         => /g' | sed -n 1,10p > comparison_output.txt;\
							>&2 printf "\n"; \
							cat comparison_output.txt >&2 ; \
							>&2 printf "        "; \
							#exit 1; \
						else \
							>&2 printf " => Success!"; \
							rm comparison_output.txt; \
						fi; \
					fi; \
					if [ ! -f comparison_output.txt ]; then \
						>&2 printf " => Removing files"; \
						rm $$k-aslminus.lst; \
						rm $$k-aslminus.aml; \
						rm $$k-aslminus.dsl; \
					fi; \
					for n in "$$k-aslminus" "$$k-extInPlace"; do \
						rm $$n.i $$n.asm $$n.nsp; \
						rm $$n.c $$n.hex $$n.map; \
						rm $$n.h $$n.src $$n.offset.h; \
					done; \
					rm $$k-extInPlace.aml; \
					rm $$k-extInPlace.lst; \
					>&2 printf " => Done"; \
				done; \
			fi; \
			>&2 printf " => Removing files"; \
			rm $$j.asm; \
			rm $$j.c; \
			rm $$j.h; \
			rm $$j.i; \
			rm $$j.hex; \
			rm $$j.lst; \
			rm $$j.map; \
			rm $$j.nsp; \
			rm $$j.offset.h; \
			rm $$j.src; \
			>&2 printf " => Done"; \
			if [ $$ret != 0 ]; then \
				rval=1; \
				>&2 echo "**** Unexpected iASL failure in $$dd/$$j.asl!"; \
				exit 1; \
			fi; \
		done; \
		>&2 echo ""; \
		if [ $$ret != 0 ]; then break; fi; \
		for j in ${AMLMOD}; do \
			ls -l $$j.aml >> $(COMPILER_LOG); \
			echo "---- Move: $$j.aml $(TOP)/tmp/aml/$(ASLTS_VER)/$(ASLTS_AMLDIR)" >> $(COMPILER_LOG); \
			mv $$j.aml $(TOP)/tmp/aml/$(ASLTS_VER)/$(ASLTS_AMLDIR); \
			ret=$$?; \
			if [ $$ret != 0 ]; then rval=2; echo "**** mv failed!" >> $(COMPILER_LOG) 2>> $(COMPILER_ERROR_LOG); break; fi; \
		done; \
	else \
		echo "Bad iASL 0: <$(ASL)> does not exist"; \
		rval=1; \
	fi; \
	if [ $$rval != 0 ]; then exit 1; fi

# Make-install one particular Test Case for all modes.

install_test_case:
	@if [ ! -f "$(ASL)" ]; then \
		echo "Bad iASL 1: <$(ASL)> does not exist"; exit 1; \
	else \
		make install_all_modes_of_test_case ASLTS_MODE=$(ASLTS_MODE) OPT=$(OPT) ASLTS_VER=$(ASLTS_VER); \
	fi

# Compile one particular Test Case for all modes.
# No moving results to aslts/tmp/aml directory.

compile_test_case:
	@rval=0; \

	echo "Compile_test_case"

	if [ -f "$(ASL)" ]; then \
		for j in ${ASLMOD} $(ASLMODADD); do \
			"$(ASL)" $(ASLTS_ASLFLAGS) $(ADD_ASLFLAGS) $$j.asl; \
			ret=$$?; \
			if [ $$ret != 0 ]; then rval=1; echo "**** Unexpected iASL failure!"; exit 1; fi; \
		done; \
	else \
		echo "Bad iASL 4: <$(ASL)> does not exist"; \
		rval=1; \
	fi; \
	if [ $$rval != 0 ]; then exit 1; fi

